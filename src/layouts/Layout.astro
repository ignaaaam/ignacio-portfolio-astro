---
interface Props {
	title: string;
}
const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Passionate full-stack web developer based in Barcelona, offering full stack web development and design services." />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ’»</text></svg>">
		<meta name="generator" content={Astro.generator} />
		<meta name="keywords"
        content="HTML, CSS, JavaScript, PHP, Laravel, SEO, Web, Website, Developer, Web Developer, Design, Programming, Portfolio, Website, Freelance, Figma, Photoshop, Tailwind, Ignacio Amat Urbina, Ignacio, Amat, Github, paginas web, barcelona, web design, ui, ux, ui/ux, Urbina React, cybersecurity, devops, webdev, full-stack, Vue, Inertia, PHP Framework">
    <meta name="author" content="Ignacio Amat Urbina">

        <!-- Basic OG Meta Tags -->
    <meta property="og:title" content="Ignacio Amat Urbina - Full Stack Web Developer">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://www.ignathedev.com">
    <meta property="og:image" content="https://www.ignathedev.com/img/profile_picture.jpg">

    <!-- Description and Site Name -->
    <meta property="og:description" content="Passionate full-stack web developer based in Barcelona, offering web development and design services.">
    <meta property="og:site_name" content="Ignacio Amat Urbina - Web Developer">

    <!-- Locale -->
    <meta property="og:locale" content="en_US">

    <!-- Keywords -->
    <meta property="og:keywords" content="Full Stack Web Developer, Web Design, Web Development, Barcelona, Spain, Freelance, Laravel, Inertia, Vue 3, SEO, Innovation, Quality">

    <!-- Author -->
    <meta property="og:author" content="Ignacio Amat Urbina">

            <link rel="canonical" href="https://www.ignathedev.com">

		    <!--==================== UNICONS ====================-->
			<link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.8/css/line.css">
		<title>{title}</title>
	
	
	
		<script type="application/ld+json">
			{"name" : "ignathedev",
			  "url" : "https://www.ignathedev.com", 
			  "logo": "https://www.ignathedev.com/assets/img/profile_picture.jpg" }
		</script>
	</head>
	<body>
		<slot />

        <!-- Global site tag (gtag.js) - Google Analytics -->
		<script type="text/partytown" async src="https://www.googletagmanager.com/gtag/js?id=G-VZQ07QHFLN"></script>
		<script type="text/partytown">
			window.dataLayer = window.dataLayer || [];
			function gtag() { dataLayer.push(arguments); }
			gtag('js', new Date());
	
			gtag('config', 'G-VZQ07QHFLN');
		</script>
		<script src="https://www.google.com/recaptcha/api.js" async defer></script>
<!-- Google Tag Manager -->
		<script type="text/partytown">
			(function (w, d, s, l, i) {
				w[l] = w[l] || []; w[l].push({
					'gtm.start':
						new Date().getTime(), event: 'gtm.js'
				}); var f = d.getElementsByTagName(s)[0],
					j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
						'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
			})(window, document, 'script', 'dataLayer', 'GTM-PPB75LJ');
		</script>
		<!-- End Google Tag Manager -->
        
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
          </script>
        <script>
            import '@fontsource/twinkle-star';
            import ScrollReveal from 'scrollreveal'
            /*==================== MENU SHOW Y HIDDEN ====================*/
const navMenu = document.getElementById('nav-menu'),
    navToggle = document.getElementById('nav-toggle'),
    navClose = document.getElementById('nav-close')

/*===== MENU SHOW =====*/
/* Validate if constant exists */
if(navToggle){
    navToggle.addEventListener('click', () =>{
        navMenu.classList.add('show-menu');
    });
}

/*===== MENU HIDDEN =====*/
/* Validate if constant exists */
if(navClose){
    navClose.addEventListener('click', () =>{
        navMenu.classList.remove('show-menu')
    })
}

/*==================== REMOVE MENU MOBILE ====================*/
const navLink = document.querySelectorAll('.nav__link')

function linkAction(){
    const navMenu = document.getElementById('nav-menu')
    // When we click on each nav__link, we remove the show-menu class
    navMenu.classList.remove('show-menu')
}
navLink.forEach(n => n.addEventListener('click', linkAction))

/*==================== ACCORDION SKILLS ====================*/
const skillsContent = document.getElementsByClassName('skills__content'),
        skillsHeader = document.querySelectorAll('.skills__header')

        function toggleSkills(){
            let itemClass = this.parentNode.className
            let i
            for(i = 0; i < skillsContent.length; i++){
                skillsContent[i].className = 'skills__content skills__close'
            }
            if(itemClass === 'skills__content skills__close'){
                this.parentNode.className = 'skills__content skills__open'
            }
        }

        skillsHeader.forEach((el) =>{
            el.addEventListener('click', toggleSkills)
        })
/*==================== QUALIFICATION TABS ====================*/
// NOT IMPLEMENTED BECAUSE PREFER SIMPLER DESIGN SHOWING BOTH
/* const tabs = document.querySelectorAll('[data-target]'),
    tabContents = document.querySelectorAll('[data-content]')

    tabs.forEach(tab =>{
        tab.addEventListener('click', () =>{
            const target = document.querySelector(tab.dataset.target)

            tabContents.forEach(tabContent => {
                tabContent.classList.remove('qualification__active')
                tabContent.classList.remove('certification__active')
            })
            target.classList.add('qualification__active')
            target.classList.add('certification__active')

            tabs.forEach(tab =>{
                tab.classList.remove('qualification__active')
                tab.classList.remove('certification__active')
            })
            tab.classList.add('qualification__active')
            tab.classList.add('certification__active')
        })
    }) */

/*==================== CERTIFICATION TABS ====================*/

/*==================== SERVICES MODAL ====================*/
const modalViews = document.querySelectorAll('.services__modal'),
        modalBtns = document.querySelectorAll('.services__button'),
        modalClose = document.querySelectorAll('.services__modal-close')

let modal = function(modalClick){
    modalViews[modalClick].classList.add('active-modal')
}

modalBtns.forEach((modalBtn, i) => {
    modalBtn.addEventListener('click', () => {
        modal(i)
    })
})

modalClose.forEach((modalClose) => {
    modalClose.addEventListener('click', () => {
        modalViews.forEach((modalView) => {
            modalView.classList.remove('active-modal')
        })
    })
})

/*==================== SCROLL SECTIONS ACTIVE LINK ====================*/
const sections = document.querySelectorAll('section[id]')

function scrollActive(){
    const scrollY = window.pageYOffset

    sections.forEach(current =>{
        const sectionHeight = current.offsetHeight
        const sectionTop = current.offsetTop - 50;
        let sectionId = current.getAttribute('id')

        if(scrollY > sectionTop && scrollY <= sectionTop + sectionHeight){
            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.add('active-link')
        }else{
            document.querySelector('.nav__menu a[href*=' + sectionId + ']').classList.remove('active-link')
        }
    })
}
window.addEventListener('scroll', scrollActive)


/*==================== CHANGE BACKGROUND HEADER ====================*/ 
function scrollHeader(){
    const nav = document.getElementById('header')
    // When the scroll is greater than 200 viewport height, add the scroll-header class to the header tag
    if(this.scrollY >= 80) nav.classList.add('scroll-header'); else nav.classList.remove('scroll-header')
}
window.addEventListener('scroll', scrollHeader)

/*==================== SHOW SCROLL UP ====================*/ 
function scrollUp(){
    const scrollUp = document.getElementById('scroll-up');
    // When the scroll is higher than 560 viewport height, add the show-scroll class to the a tag with the scroll-top class
    if(this.scrollY >= 560) scrollUp.classList.add('show-scroll'); else scrollUp.classList.remove('show-scroll')
}
window.addEventListener('scroll', scrollUp)

/*==================== DARK LIGHT THEME ====================*/ 
const themeButton = document.getElementById('theme-button')
const darkTheme = 'dark-theme'
const iconTheme = 'uil-sun'

// Previously selected topic (if user selected)
const selectedTheme = localStorage.getItem('selected-theme')
const selectedIcon = localStorage.getItem('selected-icon')

// We obtain the current theme that the interface has by validating the dark-theme class
const getCurrentTheme = () => document.body.classList.contains(darkTheme) ? 'dark' : 'light'
const getCurrentIcon = () => themeButton.classList.contains(iconTheme) ? 'uil-moon' : 'uil-sun'

// We validate if the user previously chose a topic
if (selectedTheme) {
  // If the validation is fulfilled, we ask what the issue was to know if we activated or deactivated the dark
  document.body.classList[selectedTheme === 'dark' ? 'add' : 'remove'](darkTheme)
  themeButton.classList[selectedIcon === 'uil-moon' ? 'add' : 'remove'](iconTheme)
}

// Activate / deactivate the theme manually with the button
themeButton.addEventListener('click', () => {
    // Add or remove the dark / icon theme
    document.body.classList.toggle(darkTheme)
    themeButton.classList.toggle(iconTheme)
    // We save the theme and the current icon that the user chose
    localStorage.setItem('selected-theme', getCurrentTheme())
    localStorage.setItem('selected-icon', getCurrentIcon())
})

/*==================== SCROLL REVEAL ANIMATION ====================*/
const srbottom = ScrollReveal({
    origin: 'bottom',
    distance: '125px',
    duration: 2000,
    reset: false
});

srbottom.reveal(`.home__data, .home__img,
            .about__img,.about__data,.qualification__container, 
            .certification__container,
            .services__content, .project__container, .testimonial__container, .contact, .home__scroll`, {
    interval: 200
});
        </script>
	</body>
</html>
<style is:global>
	:root {
    --header-height: 3rem;

    /*========== Colors ==========*/
    /* Change favorite color */
    --hue-color: 250; /*Purple 250 - Green 142 - Blue 230 - Pink 340*/

    /* HSL color mode */
    --first-color: hsl(var(--hue-color), 69%, 61%);
    --first-color-second:hsl(var(--hue-color), 69%, 61%) ;
    --first-color-alt: hsl(var(--hue-color), 57%, 53%);
    --first-color-lighter: hsl(var(--hue-color), 92%, 85%);
    --title-color: hsl(var(--hue-color), 8%, 15%);
    --text-color: hsl(var(--hue-color), 8%, 45%);
    --text-color-light: hsl(var(--hue-color), 8%, 65%);
    --input-color: hsl(var(--hue-color), 70%, 96%);
    --body-color: hsl(var(--hue-color), 60%, 99%);
    --container-color: #FFF;
    --scroll-bar-color: hsl(var(--hue-color), 12%, 90%);
    --scroll-thumb-color: hsl(var(--hue-color), 12%, 80%);

    /*========== Font and typography ==========*/
    --body-font: 'Poppins', sans-serif;;

    /* .5rem = 8px, 1rem = 16px, 1.5rem = 24px ... */
    --big-font-size: 2rem;
    --h1-font-size: 1.5rem;
    --h2-font-size: 1.25rem;
    --h3-font-size: 1.125rem;
    --normal-font-size: .938rem;
    --small-font-size: .813rem;
    --smaller-font-size: .75rem;

    /*========== Font weight ==========*/
    --font-medium: 500;
    --font-semi-bold: 600;

    /*========== Margenes Bottom ==========*/
    /* .25rem = 4px, .5rem = 8px, .75rem = 12px ... */
    --mb-0-25: .25rem;
    --mb-0-5: .5rem;
    --mb-0-75: .75rem;
    --mb-1: 1rem;
    --mb-1-5: 1.5rem;
    --mb-2:2rem ;
    --mb-2-5:2.5rem ;
    --mb-3:3rem ;

    /*========== z index ==========*/
    --z-tooltip: 10;
    --z-fixed: 100;
    --z-modal: 1000;
}

/* Font size for large devices */
@media screen and (min-width: 968px) {
    :root {
        --big-font-size: 3rem;
        --h1-font-size: 2.25rem;
        --h2-font-size: 1.5rem;
        --h3-font-size: 1.25rem;
        --normal-font-size: 1rem;
        --small-font-size: .875rem;
        --smaller-font-size: .813rem;
    }
}

/*========== Variables Dark theme ==========*/
body.dark-theme {
    /* HSL color mode */
    --first-color-second:hsl(var(--hue-color), 30%, 8%) ;
    --title-color: hsl(var(--hue-color), 8%, 95%);
    --text-color: hsl(var(--hue-color), 8%, 75%);
    --input-color: hsl(var(--hue-color), 29%, 16%);
    --body-color: hsl(var(--hue-color), 28%, 12%);
    --container-color: hsl(var(--hue-color), 29%, 16%);
    --scroll-bar-color: hsl(var(--hue-color), 12%, 48%);
    --scroll-thumb-color: hsl(var(--hue-color), 12%, 36%);
    transition: all 1.5s;
    transition-timing-function: ease-in-out;
}

/*========== Button Dark/Light ==========*/
.nav__btns {
    display: flex;
    align-items: center;
}

.change-theme {
    font-size: 1.25rem;
    color: var(--title-color);
    margin-right: var(--mb-1);
    cursor: pointer;
    transition: color .5s;
}

.change-theme:hover {
    color: var(--first-color);
}

/*==================== BASE ====================*/
* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

html {
    scroll-behavior: smooth;
}

body {
    margin: 0 0 var(--header-height) 0;
    font-family: 'Poppins', sans-serif;
    font-size: var(--normal-font-size);
    background-color: var(--body-color);
    color: var(--text-color);
    transition: all 1.5s ease-in-out;
}

h1,h2,h3,h4 {
    color: var(--title-color);
    font-weight: var(--font-semi-bold);
}

ul{
    list-style: none;
}

a {
    text-decoration: none;
}

img {
    max-width: 100%;
    height: auto;
}

</style>
